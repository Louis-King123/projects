# -*- coding: utf-8 -*-
import logging
import time

from config import APP_CODE as app_code, SECRET_KEY as app_secret
from blueking.component.shortcuts import  get_client_by_request

logger = logging.getLogger(__name__)

class Send:

    def __init__(self, bk_token, client):
        self.bk_token = bk_token
        self.client = client

    def reload(self, bk_token, request):
        self.bk_token = bk_token
        self.client = get_client_by_request(request)

    def send_mail(self, receiver="", receiver__username="", sender="", title="", content=""):
        """
        发送邮件
        :param receiver: 接收人 多个以逗号分隔,
        :param receiver__username: 接收人，以receiver优先 ,
        :param sender: 发送人,
        :param title: 标题,
        :param content: 内容,
        """
        kwargs = {
            "bk_app_code": app_code,
            "bk_app_secret": app_secret,
            "bk_token": self.bk_token,
            "sender": sender,
            "title": title,
            "content": content,
            "body_format": "Text"
        }
        if receiver:
            kwargs["receiver"] = receiver
        else:
            kwargs["receiver__username"] = receiver__username

        res = self.client.cmsi.send_mail(kwargs)
        if not res.get("result", False):
            logger.warning(f"发送邮件失败  接口名称(send_mail) 请求参数({kwargs})")
        return {
            "message": res['message'],
            "result": res['result']
        }

    def send_sms(self, receiver="", receiver__username="", content=""):
        """
        发送短信
        :param receiver: 接收人 多个以逗号分隔
        :param receiver__username: 接收人，以receiver优先
        :param title: 标题
        :param content: 内容
        """
        kwargs = {
            "bk_app_code": app_code,
            "bk_app_secret": app_secret,
            "bk_token": self.bk_token,
            "content": content,
        }

        if receiver:
            kwargs["receiver"] = receiver
        else:
            kwargs["receiver__username"] = receiver__username

        res = self.client.cmsi.send_sms(kwargs)
        if not res.get("result", False):
            logger.warning(f"发送信息失败  接口名称(send_sms) 请求参数({kwargs})")
        return {
            "message": res['message'],
            "result": res['result']
        }

    def send_weixin(self, receiver="", receiver__username="", heading="", message="", remark=""):
        """
        发送微信
        :param receiver：接收人 多个以逗号分隔
        :param receiver__username：接收人，以receiver优先
        :param heading：信息头部
        :param message：信息头部
        :param remark：内容
        """
        kwargs = {
            "bk_app_code": app_code,
            "bk_app_secret": app_secret,
            "bk_token": self.bk_token,
            "data": {
                "heading": heading,  # 通知头部文字
                "message": message,  # 通知文字
                "date": time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()),
                "remark": remark  # 通知尾部文字
            }
        }
        if receiver:
            kwargs["receiver"] = receiver
        else:
            kwargs["receiver__username"] = receiver__username

        res = self.client.cmsi.send_weixin(kwargs)
        if not res.get("result", False):
            logger.warning(f"发送微信失败  接口名称(send_weixin) 请求参数({kwargs})")
        return {
            "message": res['message'],
            "result": res['result']
        }
